--Users
CREATE USER STUDENT IDENTIFIED BY &mypassword;
GRANT create session TO STUDENT;
GRANT create table TO STUDENT;
GRANT create view TO STUDENT;
GRANT create any trigger TO STUDENT;
GRANT create any procedure TO STUDENT;
GRANT create sequence TO STUDENT;
GRANT create synonym TO STUDENT;

CREATE USER PROXY_STUDENT IDENTIFIED BY &mypassword;
GRANT create session TO PROXY_STUDENT;

ALTER USER STUDENT QUOTA UNLIMITED ON USERS;
ALTER USER PROXY_STUDENT QUOTA UNLIMITED ON USERS;

--Tables
CREATE TABLE STUDENT.STUDENT 
( 
  STUDENT_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),  
  PEN NUMBER CONSTRAINT PEN_UNIQUE UNIQUE,  
  LEGAL_FIRST_NAME VARCHAR2(40),
  LEGAL_MIDDLE_NAME VARCHAR2(60),
  LEGAL_LAST_NAME VARCHAR2(40),
  DATE_OF_BIRTH DATE NOT NULL,
  GENDER_CODE VARCHAR2(10) NOT NULL,
  DATA_SOURCE_CODE VARCHAR2(10) NOT NULL,
  USUAL_FIRST_NAME VARCHAR2(40),
  USUAL_MIDDLE_NAME VARCHAR2(60),
  USUAL_LAST_NAME VARCHAR2(40),
  EMAIL VARCHAR2(80),
  DECEASED_DATE DATE NOT NULL,
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT STUDENT_PK PRIMARY KEY (STUDENT_ID)  
);  

CREATE TABLE STUDENT.ADDRESS (
  ADDRESS_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),  
  STUDENT_ID NUMBER NOT NULL,  
  ADDRESS_LINE_1 VARCHAR2(40) NOT NULL,
  ADDRESS_LINE_2 VARCHAR2(40),
  CITY VARCHAR2(40) NOT NULL,
  PROVINCE VARCHAR2(40) NOT NULL,
  POSTAL VARCHAR2(7) NOT NULL,
  DATA_SOURCE_CODE VARCHAR(10) NOT NULL,
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT ADDRESS_PK PRIMARY KEY (ADDRESS_ID)  
);

CREATE TABLE STUDENT.DIGITAL_IDENTITY (
  DIGITAL_IDENTITY_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),  
  STUDENT_ID NUMBER NOT NULL,  
  IDENTITY_TYPE_CODE VARCHAR2(10) NOT NULL,
  IDENTITY_VALUE VARCHAR2(40),
  LAST_ACCESS_TIME DATE NOT NULL,
  LAST_ACCESS_CHANNEL_CODE VARCHAR2(10) NOT NULL,
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT DIGITAL_IDENTITY_PK PRIMARY KEY (DIGITAL_IDENTITY_ID)  
);

CREATE TABLE STUDENT.STUDENT_PEN_REQUEST (
  STUDENT_PEN_REQUEST_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
  DIGITAL_IDENTITY_ID NUMBER NOT NULL,
  PEN_REQUEST_STATUS_CODE VARCHAR2(10) NOT NULL,
  LEGAL_FIRST_NAME VARCHAR2(40),
  LEGAL_MIDDLE_NAME VARCHAR2(60),
  LEGAL_LAST_NAME VARCHAR2(40),
  DATE_OF_BIRTH DATE NOT NULL,
  GENDER_CODE VARCHAR2(10) NOT NULL,
  DATA_SOURCE_CODE VARCHAR2(10) NOT NULL,
  USUAL_FIRST_NAME VARCHAR2(40),
  USUAL_MIDDLE_NAME VARCHAR2(60),
  USUAL_LAST_NAME VARCHAR2(40),
  EMAIL VARCHAR2(80),
  MAIDEN_NAME VARCHAR2(60),
  PAST_NAMES VARCHAR2(200),
  LAST_BC_SCHOOL VARCHAR2(100),
  LAST_BC_STUDENT_NUMBER VARCHAR2(20),
  CURRENT_SCHOOL VARCHAR2(100),
  ADDRESS_LINE_1 VARCHAR2(40) NOT NULL,
  ADDRESS_LINE_2 VARCHAR2(40),
  CITY VARCHAR2(40) NOT NULL,
  PROVINCE VARCHAR2(40) NOT NULL,
  POSTAL VARCHAR2(7) NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,  
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT STUDENT_PEN_REQUEST_PK PRIMARY KEY (STUDENT_PEN_REQUEST_ID)  
);

CREATE TABLE STUDENT.IDENTITY_TYPE_CODE (
  IDENTITY_TYPE_CODE VARCHAR2(10) NOT NULL,
  DESCRIPTION VARCHAR2(20) NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,  
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT IDENTITY_TYPE_CODE_PK PRIMARY KEY (IDENTITY_TYPE_CODE)  
);

CREATE TABLE STUDENT.ACCESS_CHANNEL_CODE (
  ACCESS_CHANNEL_CODE VARCHAR2(10) NOT NULL,
  DESCRIPTION VARCHAR2(20) NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,  
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT ACCESS_CHANNEL_CODE_PK PRIMARY KEY (ACCESS_CHANNEL_CODE)  
);

CREATE TABLE STUDENT.GENDER_CODE (
  GENDER_CODE VARCHAR2(10) NOT NULL,
  DESCRIPTION VARCHAR2(20) NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,  
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT GENDER_CODE_PK PRIMARY KEY (GENDER_CODE)  
);

CREATE TABLE STUDENT.DATA_SOURCE_CODE (
  DATA_SOURCE_CODE VARCHAR2(10) NOT NULL,
  DESCRIPTION VARCHAR2(20) NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,  
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT DATA_SOURCE_CODE_PK PRIMARY KEY (DATA_SOURCE_CODE)  
);

CREATE TABLE STUDENT.PEN_REQUEST_STATUS_CODE (
  PEN_REQUEST_STATUS_CODE VARCHAR2(10) NOT NULL,
  DESCRIPTION VARCHAR2(20) NOT NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  EXPIRY_DATE DATE NOT NULL,  
  CREATE_USER VARCHAR2(32) NOT NULL,
  CREATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  UPDATE_USER VARCHAR2(32) NOT NULL,
  UPDATE_DATE DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT PEN_REQUEST_STATUS_CODE_PK PRIMARY KEY (PEN_REQUEST_STATUS_CODE)  
);

--Foreign keys
alter table STUDENT.ADDRESS add constraint FK_ADDRESS_STUDENT_ID foreign key (STUDENT_ID) references STUDENT.STUDENT (STUDENT_ID);
alter table STUDENT.DIGITAL_IDENTITY add constraint FK_DIGITAL_IDENTITY_STUDENT_ID foreign key (STUDENT_ID) references STUDENT.STUDENT (STUDENT_ID);
alter table STUDENT.DIGITAL_IDENTITY add constraint FK_DIGITAL_IDENT_IDENT_TYPE_CODE foreign key (IDENTITY_TYPE_CODE) references STUDENT.IDENTITY_TYPE_CODE (IDENTITY_TYPE_CODE);
alter table STUDENT.DIGITAL_IDENTITY add constraint FK_DIGITAL_IDENT_ACCESS_CHAN_CODE foreign key (LAST_ACCESS_CHANNEL_CODE) references STUDENT.ACCESS_CHANNEL_CODE (ACCESS_CHANNEL_CODE);
alter table STUDENT.STUDENT add constraint FK_STUDENT_GENDER_CODE foreign key (GENDER_CODE) references STUDENT.GENDER_CODE (GENDER_CODE);
alter table STUDENT.STUDENT add constraint FK_STUDENT_DATA_SOURCE_CODE foreign key (DATA_SOURCE_CODE) references STUDENT.DATA_SOURCE_CODE (DATA_SOURCE_CODE);
alter table STUDENT.ADDRESS add constraint FK_ADDRESS_DATA_SOURCE_CODE foreign key (DATA_SOURCE_CODE) references STUDENT.DATA_SOURCE_CODE (DATA_SOURCE_CODE);
alter table STUDENT.STUDENT_PEN_REQUEST add constraint FK_STUDENT_PEN_REQUEST_DIGITAL_IDENTITY_ID foreign key (DIGITAL_IDENTITY_ID) references STUDENT.DIGITAL_IDENTITY (DIGITAL_IDENTITY_ID);
alter table STUDENT.STUDENT_PEN_REQUEST add constraint FK_STUDENT_PEN_REQUEST_PEN_REQUEST_STATUS_CODE foreign key (PEN_REQUEST_STATUS_CODE) references STUDENT.PEN_REQUEST_STATUS_CODE (PEN_REQUEST_STATUS_CODE);
alter table STUDENT.STUDENT_PEN_REQUEST add constraint FK_STUDENT_PEN_REQUEST_DATA_SOURCE_CODE foreign key (DATA_SOURCE_CODE) references STUDENT.DATA_SOURCE_CODE (DATA_SOURCE_CODE);

--Grants
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.STUDENT
TO
  PROXY_STUDENT;
  
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.ADDRESS
TO
  PROXY_STUDENT;
  
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.DIGITAL_IDENTITY
TO
  PROXY_STUDENT;
 
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.STUDENT_PEN_REQUEST
TO
  PROXY_STUDENT;  

GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.IDENTITY_TYPE_CODE
TO
  PROXY_STUDENT; 
  
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.ACCESS_CHANNEL_CODE
TO
  PROXY_STUDENT; 
  
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.GENDER_CODE
TO
  PROXY_STUDENT; 
  
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.DATA_SOURCE_CODE
TO
  PROXY_STUDENT; 
  
GRANT SELECT,INSERT,UPDATE,DELETE
ON
  STUDENT.PEN_REQUEST_STATUS_CODE
TO
  PROXY_STUDENT; 
  
--ORDS Enabled Schema/Tables
--THESE NEED TO BE RUN AS THE AUTH SCHEMA OWNER 
CONN STUDENT

DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    ORDS.ENABLE_SCHEMA(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_url_mapping_type => 'BASE_PATH',
                       p_url_mapping_pattern => 'student',
                       p_auto_rest_auth => FALSE);
                       
    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'STUDENT',
                       p_object_type => 'TABLE',
                       p_object_alias => 'student',
                       p_auto_rest_auth => FALSE);
                       
	ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'ADDRESS',
                       p_object_type => 'TABLE',
                       p_object_alias => 'address',
                       p_auto_rest_auth => FALSE);

    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'DIGITAL_IDENTITY',
                       p_object_type => 'TABLE',
                       p_object_alias => 'digital_identity',
                       p_auto_rest_auth => FALSE);

    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'STUDENT_PEN_REQUEST',
                       p_object_type => 'TABLE',
                       p_object_alias => 'student_pen_request',
                       p_auto_rest_auth => FALSE);    
                       
    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'IDENTITY_TYPE_CODE',
                       p_object_type => 'TABLE',
                       p_object_alias => 'identity_type_code',
                       p_auto_rest_auth => FALSE);   
                       
    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'ACCESS_CHANNEL_CODE',
                       p_object_type => 'TABLE',
                       p_object_alias => 'access_channel_code',
                       p_auto_rest_auth => FALSE);   
                       
    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'GENDER_CODE',
                       p_object_type => 'TABLE',
                       p_object_alias => 'gender_code',
                       p_auto_rest_auth => FALSE);   
                       
    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'DATA_SOURCE_CODE',
                       p_object_type => 'TABLE',
                       p_object_alias => 'data_source_code',
                       p_auto_rest_auth => FALSE);   

    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'STUDENT',
                       p_object => 'PEN_REQUEST_STATUS_CODE',
                       p_object_type => 'TABLE',
                       p_object_alias => 'pen_request_status_code',
                       p_auto_rest_auth => FALSE);   
                       
    commit;

END;