pipeline{
  agent any

    environment{
      TOOLS = 'c2mvws-tools'
      DEV = 'c2mvws-dev'
      TEST = 'c2mvws-test'
      PROD = 'c2mvws-prod'

      REPO_NAME = 'educ-digitalid-api'
      OWNER = 'bcgov'
      JOB_NAME = 'master'
      TAG = 'dev'
      
      APP_NAME = 'digitalid-api'
      APP_DOMAIN = 'pathfinder.gov.bc.ca'

      SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
      SOURCE_REPO_REF = 'master'
      SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

      TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
      DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
      TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
      PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
  }

  stages{
      stage('Build JORDS'){
        steps{
          script{
            openshift.withCluster(){
              openshift.withProject(){
                def bcJORDS = openshift.process('-f', 'tools/openshift/jords.bc.yaml')
                openshift.apply(bcJORDS).narrow('bc').startBuild('-w').logs('-f')
              }
            }
          }
        }
      }
      stage('Build DigitalID API'){
        steps{
          script{
            openshift.withCluster(){
              openshift.withProject(){
                def bcApi = openshift.process('-f', 'tools/openshift/api.bc.yaml')
                openshift.apply(bcApi).narrow('bc').startBuild('-w').logs('-f')
              }
            }
          }
        }
      }
      stage('Promote to DEV') {
        steps {
          script {
            openshift.withCluster() {
              echo "Tagging image"
              openshift.tag("${TOOLS}/${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${TAG}")
              def dcTemplate = openshift.process('-f',
                'tools/openshift/api.dc.yaml',
                "REPO_NAME=${REPO_NAME}",
                "JOB_NAME=${JOB_NAME}",
                "NAMESPACE=${DEV}",
                "APP_NAME=${APP_NAME}",
                "HOST_ROUTE=${DEV_HOST_ROUTE}",
                "TAG=${TAG}"
              )

              echo "Applying Deployment ${REPO_NAME}"
              def dc = openshift.apply(dcTemplate).narrow('dc')

              echo "Waiting for deployment to roll out"
              // Wait for deployments to roll out
              timeout(10) {
                dc.rollout().status('--watch=true')
              }
            }
          }
        }
      }
    }
  }
