pipeline{
  agent {
      label 'maven35'
  }

    environment{
      TOOLS = 'c2mvws-tools'
      DEV = 'c2mvws-dev'
      TEST = 'c2mvws-test'
      PROD = 'c2mvws-prod'

      REPO_NAME = 'educ-digitalid-api'
      OWNER = 'bcgov'
      JOB_NAME = 'master'
      TAG = 'dev'
      
      APP_NAME = 'digitalid-api'
      APP_DOMAIN = 'pathfinder.gov.bc.ca'

      SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
      SOURCE_REPO_REF = 'master'
      SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

      TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
      DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
      TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
      PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"

      SONARQUBE_HOSTNAME = "https://sonarqube.c2mvws-tools.svc.cluster.local"
      SONARQUBE_TOKEN = "372d1faf56b9ebbb6580ac2098d232d8a0980e9d"

  }

  stages{
    stage('Unit Tests') {
      steps {
        sh "mvn -f ./api/pom.xml test"
      }
    }
    stage('Build App') {
      steps {
        sh "mvn -f ./api/pom.xml -Dmaven.test.skip=true package"
      }
    }
    stage('Create Image Builder') {
      when {
        expression {
          openshift.withCluster() {
            return !openshift.selector("bc", "educ-digitalid-api-master").exists();
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.newBuild("--name=educ-digitalid-api-master", "--image-stream=redhat-openjdk18-openshift:1.1", "--binary")
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.selector("bc", "educ-digitalid-api-master").startBuild("--from-file=./api/target/digitalid-api-0.0.1.SNAPSHOT.jar", "--wait")
          }
        }
      }
      post {
        success {
          echo 'Cleanup BuildConfigs'
          script {
              openshift.withCluster() {
                openshift.withProject(TOOLS) {
                  def bcApi = openshift.selector('bc', "${REPO_NAME}-${JOB_NAME}")

                  if(bcApi.exists()) {
                      echo "Removing BuildConfig ${REPO_NAME}-${JOB_NAME}"
                      bcApi.delete()
                  }
                }
              }
            }
        }
        failure {
          echo 'Build stage failed'
        }
      }
    }
    stage('Promote to DEV') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(DEV) {
              echo "Tagging image"
              openshift.tag("${TOOLS}/${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${TAG}")
              def dcTemplate = openshift.process('-f',
                'tools/openshift/api.dc.yaml',
                "REPO_NAME=${REPO_NAME}",
                "JOB_NAME=${JOB_NAME}",
                "NAMESPACE=${DEV}",
                "APP_NAME=${APP_NAME}",
                "HOST_ROUTE=${DEV_HOST_ROUTE}",
                "TAG=${TAG}"
              )

              echo "Applying Deployment ${REPO_NAME}"
              def dc = openshift.apply(dcTemplate).narrow('dc')

              echo "Waiting for deployment to roll out"
              // Wait for deployments to roll out
              timeout(10) {
                dc.rollout().status('--watch=true')
              }
            }
          }
        }
      }
    }
    stage('Report to SonarQube') {
        steps {
            script{
                dir('api'){
                    sh "mvn sonar:sonar -Dsonar.host.url=${SONARQUBE_HOSTNAME} -Dsonar.login=${SONARQUBE_TOKEN}"
                }
            }
        }
    }
    stage('Deploy to Test'){
      steps{
          deployStage('Test', TEST, TEST_HOST_ROUTE)
      } 
      post {
          success{
              echo 'Deployment to Test was successful'
          }
          failure{
              echo 'Deployment to Test failed'
          }
      }
    }
  }
}
def deployStage(String stageEnv, String projectEnv, String hostRouteEnv) {
  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      echo "Tagging image"
      openshift.tag("${TOOLS}/${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${TAG}")
      def dcTemplate = openshift.process('-f',
        'tools/openshift/api.dc.yaml',
        "REPO_NAME=${REPO_NAME}",
        "JOB_NAME=${JOB_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "HOST_ROUTE=${hostRouteEnv}",
        "TAG=${TAG}"
      )

      echo "Applying Deployment ${REPO_NAME}"
      def dc = openshift.apply(dcTemplate).narrow('dc')

      echo "Waiting for deployment to roll out"
      // Wait for deployments to roll out
      timeout(10) {
        dc.rollout().status('--watch=true')
      }
    }
  }
}