---
apiVersion: v1
kind: Template
labels:
    template: "${REPO_NAME}-template"
metadata:
    name: "${REPO_NAME}-${JOB_NAME}-dc"
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels: 
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-${JOB_NAME}"
  spec:
    replicas: ${{MIN_REPLICAS}}
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentConfig: "${APP_NAME}-${JOB_NAME}"
    strategy:
      resources: {}
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: digitalidapi
          prometheus.io/path: /actuator/prometheus
          prometheus.io/port: '8080'
          prometheus.io/scrape: 'true'
        labels:
          app: "${APP_NAME}-${JOB_NAME}"
          deploymentConfig: "${APP_NAME}-${JOB_NAME}"
      spec:
        containers:
        - image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/${REPO_NAME}-${JOB_NAME}:${TAG}
          imagePullPolicy: Always
          volumeMounts:
            - name: tls-certs
              mountPath: "/etc/tls-certs"
              readOnly: true
            - name: log-storage
              mountPath: /logs
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 20
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          name: "${APP_NAME}-${JOB_NAME}"
          ports:
          - containerPort: ${{CONTAINER_PORT}}
            protocol: TCP
          resources:
            requests:
              cpu: "${MIN_CPU}"
              memory: "${MIN_MEM}"
            limits:
              cpu: "${MAX_CPU}"
              memory: "${MAX_MEM}"
        - image: fluent/fluent-bit
          name: "${APP_NAME}-${JOB_NAME}-fluent-bit-sidecar"
          imagePullPolicy: Always
          volumeMounts:
            - name: log-storage
              mountPath: /mnt/log
            - name: flb-sc-config-volume
              mountPath: /fluent-bit/etc/
          readinessProbe:
            tcpSocket:
              port: 2020
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /
              port: 2020
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          ports:
            - containerPort: 2020
              protocol: TCP
              name: metrics
          resources:
            requests:
              cpu: "5m"
              memory: "25Mi"
            limits:
              cpu: "10m"
              memory: "50Mi"
        volumes:
          - name: tls-certs
            secret:
              secretName: digitalid-api-cert
          - name: log-storage
            emptyDir: {}
          - name: flb-sc-config-volume
            configMap:
              name: "${APP_NAME}-flb-sc-config-map"
    test: false
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: "digitalid-api-cert"
    labels:
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-${JOB_NAME}"
  spec:
    ports:
    - name: ${CONTAINER_PORT}-tcp
      port: ${{CONTAINER_PORT}}
      protocol: TCP
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-${JOB_NAME}"
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-${JOB_NAME}"
  spec:
    host: "${HOST_ROUTE}"
    path: ${HOST_PATH}
    port:
      targetPort: ${CONTAINER_PORT}-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: "${APP_NAME}-${JOB_NAME}"
      weight: 100
    wildcardPolicy: None
- apiVersion: autoscaling/v2beta1
  kind: HorizontalPodAutoscaler
  metadata:
    name: "${APP_NAME}-${JOB_NAME}-cpu-autoscaler"
  spec:
    scaleTargetRef:
      apiVersion: apps.openshift.io/v1
      kind: DeploymentConfig
      name: "${APP_NAME}-${JOB_NAME}"
      subresource: scale
    minReplicas: ${{MIN_REPLICAS}}
    maxReplicas: ${{MAX_REPLICAS}}
    metrics:
      - type: Resource
        resource:
          name: cpu
          targetAverageUtilization: 200
parameters:
- name: REPO_NAME
  description: Application repository name
  required: true
- name: JOB_NAME
  description: Job identifier (i.e. 'backend' OR 'frontend')
  required: true
- name: NAMESPACE
  description: Target namespace reference (i.e. 'k8vopl-dev')
  required: true
- name: APP_NAME
  description: Application name
  required: true
- name: HOST_ROUTE
  description: The host the route will use to expose service outside cluster 
  required: true
- name: CONTAINER_PORT
  description: The port on which the application will be accessible
  value: "8080"
  required: false
- name: TAG
  description: The identifying tag for this specific deployment
  required: true
- name: HOST_PATH
  description: The path appended to the HOST_ROUTE where the root of this project will be served
  value: "/"
  required: false
- name: MIN_REPLICAS
  description: The minimum amount of replicas
  required: true
- name: MAX_REPLICAS
  description: The maximum amount of replicas
  required: true
- name: MIN_CPU
  description: The minimum amount of cpu
  required: true
- name: MAX_CPU
  description: The maximum amount of cpu
  required: true
- name: MIN_MEM
  description: The minimum amount of memory
  required: true
- name: MAX_MEM
  description: The maximum amount of memory
  required: true
